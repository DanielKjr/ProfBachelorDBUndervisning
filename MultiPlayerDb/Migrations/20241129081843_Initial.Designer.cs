// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MultiPlayerDb.Context;

#nullable disable

namespace MultiPlayerDb.Migrations
{
    [DbContext(typeof(WorldContext))]
    [Migration("20241129081843_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MultiPlayerDb.Model.Abilities.Ability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassConstraint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Damage")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("NPCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("NPCId");

                    b.ToTable("Abilities", "MultiPlayerDb");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Account.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Currency")
                        .HasColumnType("float");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Characters", "MultiPlayerDb");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<string>("Texture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Items", "MultiPlayerDb");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.NPCStuff.NPC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Attackable")
                        .HasColumnType("bit");

                    b.Property<string>("Behavior")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Texture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("NPCs", "MultiPlayerDb");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Quests.Quest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dialogue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ItemToCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NPCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemToCreateId");

                    b.HasIndex("NPCId")
                        .IsUnique();

                    b.ToTable("Quests", "MultiPlayerDb");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Quests.Reward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Currency")
                        .HasColumnType("float");

                    b.Property<double>("Experience")
                        .HasColumnType("float");

                    b.Property<Guid>("QuestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestId")
                        .IsUnique();

                    b.ToTable("Rewards", "MultiPlayerDb");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("placeholder siden jeg ikke har noget reelt asset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorldId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorldId");

                    b.ToTable("Regions", "MultiPlayerDb");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Stat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Boost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("StatType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Stats", "MultiPlayerDb");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.World", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Worlds", "MultiPlayerDb");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Abilities.Ability", b =>
                {
                    b.HasOne("MultiPlayerDb.Model.Account.Character", "Character")
                        .WithMany("Abilities")
                        .HasForeignKey("CharacterId");

                    b.HasOne("MultiPlayerDb.Model.NPCStuff.NPC", "NPC")
                        .WithMany("Abilities")
                        .HasForeignKey("NPCId");

                    b.Navigation("Character");

                    b.Navigation("NPC");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Item", b =>
                {
                    b.HasOne("MultiPlayerDb.Model.Account.Character", null)
                        .WithMany("Items")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.NPCStuff.NPC", b =>
                {
                    b.HasOne("MultiPlayerDb.Model.Region", null)
                        .WithMany("NPCS")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Quests.Quest", b =>
                {
                    b.HasOne("MultiPlayerDb.Model.Account.Character", null)
                        .WithMany("CompletedQuests")
                        .HasForeignKey("CharacterId");

                    b.HasOne("MultiPlayerDb.Model.Item", "ItemToCreate")
                        .WithMany()
                        .HasForeignKey("ItemToCreateId");

                    b.HasOne("MultiPlayerDb.Model.NPCStuff.NPC", "NPC")
                        .WithOne("Quest")
                        .HasForeignKey("MultiPlayerDb.Model.Quests.Quest", "NPCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemToCreate");

                    b.Navigation("NPC");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Quests.Reward", b =>
                {
                    b.HasOne("MultiPlayerDb.Model.Quests.Quest", null)
                        .WithOne("Reward")
                        .HasForeignKey("MultiPlayerDb.Model.Quests.Reward", "QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Region", b =>
                {
                    b.HasOne("MultiPlayerDb.Model.World", null)
                        .WithMany("Regions")
                        .HasForeignKey("WorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Stat", b =>
                {
                    b.HasOne("MultiPlayerDb.Model.Item", null)
                        .WithMany("Stats")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Account.Character", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("CompletedQuests");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Item", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.NPCStuff.NPC", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Quest")
                        .IsRequired();
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Quests.Quest", b =>
                {
                    b.Navigation("Reward");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.Region", b =>
                {
                    b.Navigation("NPCS");
                });

            modelBuilder.Entity("MultiPlayerDb.Model.World", b =>
                {
                    b.Navigation("Regions");
                });
#pragma warning restore 612, 618
        }
    }
}
